{
  "name": "AI Collections - Cold Outreach",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "collections/cold-outreach",
        "authentication": "headerAuth",
        "responseMode": "onReceived",
        "responseData": "allEntries",
        "options": {}
      },
      "id": "webhook_trigger",
      "name": "GHL New Collections Account",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  c.id as customer_id,\n  c.name,\n  c.email,\n  c.phone,\n  COUNT(DISTINCT l.id) as total_loans,\n  SUM(l.original_amount) as total_borrowed,\n  SUM(p.amount) as total_paid,\n  AVG(DATEDIFF(p.payment_date, l.due_date)) as avg_days_late,\n  DAY(MAX(p.payment_date)) as favorite_payment_day,\n  DAYNAME(MAX(p.payment_date)) as favorite_weekday,\n  COUNT(CASE WHEN p.type = 'partial' THEN 1 END) as partial_payments,\n  (SELECT balance FROM current_loans WHERE customer_id = c.id LIMIT 1) as current_balance,\n  (SELECT days_overdue FROM current_loans WHERE customer_id = c.id LIMIT 1) as days_past_due\nFROM customers c\nLEFT JOIN loans l ON c.id = l.customer_id\nLEFT JOIN payments p ON l.id = p.loan_id\nWHERE c.id = '{{$json[\"customer_id\"]}}'\nGROUP BY c.id",
        "options": {
          "queryTimeout": 30000
        }
      },
      "id": "mysql_query",
      "name": "Query Loan History",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [450, 300],
      "credentials": {
        "mySql": {
          "id": "mysql_readonly",
          "name": "MySQL Read-Only"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Calculate settlement authority based on loan history\nconst balance = $input.item.json.current_balance || 0;\nconst daysPastDue = $input.item.json.days_past_due || 0;\nconst totalLoans = $input.item.json.total_loans || 0;\nconst avgDaysLate = $input.item.json.avg_days_late || 0;\n\nlet baseDiscount = 0.10; // Start at 10%\n\n// Time-based escalation\nif (daysPastDue > 30) baseDiscount += 0.05;\nif (daysPastDue > 60) baseDiscount += 0.10;\nif (daysPastDue > 90) baseDiscount += 0.10;\n\n// History-based adjustment\nif (avgDaysLate > 30) baseDiscount += 0.05;\nif (totalLoans > 5) baseDiscount -= 0.05; // Loyalty discount reduction\n\n// Cap at 40% maximum discount\nconst maxDiscount = Math.min(baseDiscount, 0.40);\n\n// Determine personality profile\nlet personality = 'standard';\nif (avgDaysLate > 0 && avgDaysLate <= 10) personality = 'reliable_but_slow';\nelse if ($input.item.json.favorite_payment_day === 15 || $input.item.json.favorite_payment_day === 30) personality = 'payday_payer';\nelse if ($input.item.json.partial_payments > 2) personality = 'partial_payer';\nelse if (avgDaysLate > 60) personality = 'chronic_late';\nelse if (totalLoans === 0) personality = 'ghost';\n\nreturn {\n  ...$input.item.json,\n  settlement_authority: {\n    max_discount: maxDiscount,\n    min_acceptable: balance * (1 - maxDiscount),\n    immediate_settlement: balance * (1 - maxDiscount - 0.05),\n    payment_plan_months: daysPastDue > 60 ? 6 : 3\n  },\n  personality_profile: personality\n};"
      },
      "id": "calculate_authority",
      "name": "Calculate Settlement Authority",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "customer:{{$json[\"customer_id\"]}}:profile",
        "value": "={{JSON.stringify($json)}}",
        "expire": true,
        "ttl": 604800,
        "options": {}
      },
      "id": "redis_cache_profile",
      "name": "Cache Customer Profile",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [850, 300],
      "credentials": {
        "redis": {
          "id": "redis_cache",
          "name": "Redis Cache"
        }
      }
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4-turbo-preview",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert collections strategist. Create 3 distinct message variants for cold outreach based on the customer's loan history and personality profile.\n\nVariant A - History-Based: Reference their specific payment history patterns\nVariant B - Emotional/Relationship: Focus on the relationship and understanding\nVariant C - Settlement Offer: Lead with a specific discount offer\n\nCustomer Profile:\n- Personality: {{$json[\"personality_profile\"]}}\n- Total Loans: {{$json[\"total_loans\"]}}\n- Days Past Due: {{$json[\"days_past_due\"]}}\n- Current Balance: ${{$json[\"current_balance\"]}}\n- Favorite Payment Day: {{$json[\"favorite_payment_day\"]}}\n- Settlement Authority: {{$json[\"settlement_authority\"][\"min_acceptable\"]}}\n\nKeep messages under 160 characters for SMS. Be empathetic but clear about the debt. Include [PAYMENT_LINK] placeholder.\n\nReturn JSON with format:\n{\n  \"variant_a\": \"message text\",\n  \"variant_b\": \"message text\",\n  \"variant_c\": \"message text\"\n}"
            },
            {
              "role": "user",
              "content": "Generate 3 personalized collection messages for customer {{$json[\"name\"]}} with balance ${{$json[\"current_balance\"]}} that is {{$json[\"days_past_due\"]}} days overdue."
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 500,
          "topP": 0.9,
          "responseFormat": {
            "type": "json_object"
          }
        }
      },
      "id": "openai_agent1",
      "name": "AI Agent #1 - Cold Outreach",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1.1,
      "position": [1050, 300],
      "credentials": {
        "openAiApi": {
          "id": "openai_api",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Parse AI response and select variant for A/B testing\nconst messages = JSON.parse($input.item.json.message.content);\nconst variants = ['a', 'b', 'c'];\nconst selectedVariant = variants[Math.floor(Math.random() * variants.length)];\nconst selectedMessage = messages[`variant_${selectedVariant}`];\n\n// Replace payment link placeholder\nconst paymentLink = `https://pay.example.com/${$input.item.json.customer_id}`;\nconst finalMessage = selectedMessage.replace('[PAYMENT_LINK]', paymentLink);\n\nreturn {\n  customer_id: $input.item.json.customer_id,\n  customer_name: $input.item.json.name,\n  phone: $input.item.json.phone,\n  email: $input.item.json.email,\n  message_text: finalMessage,\n  variant_used: `variant_${selectedVariant}`,\n  all_variants: messages,\n  settlement_authority: $input.item.json.settlement_authority,\n  personality_profile: $input.item.json.personality_profile,\n  current_balance: $input.item.json.current_balance,\n  days_past_due: $input.item.json.days_past_due\n};"
      },
      "id": "prepare_message",
      "name": "Prepare Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "amount": 30,
        "unit": "seconds"
      },
      "id": "wait_natural",
      "name": "Natural Delay (30s)",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://services.leadconnectorhq.com/conversations/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$credentials.apiKey}}"
            },
            {
              "name": "Version",
              "value": "2021-07-28"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"type\": \"SMS\",\n  \"contactId\": \"{{$json[\"customer_id\"]}}\",\n  \"message\": \"{{$json[\"message_text\"]}}\"\n}",
        "options": {
          "timeout": 10000,
          "retry": {
            "maxTries": 3,
            "waitBetweenTries": 2000
          }
        }
      },
      "id": "send_message",
      "name": "Send SMS via GoHighLevel",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1650, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "ghl_api",
          "name": "GoHighLevel API"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "customer:{{$json[\"customer_id\"]}}:conversation",
        "value": "={{JSON.stringify({\n  status: 'outreach_sent',\n  messages: [{\n    type: 'outbound',\n    text: $json.message_text,\n    variant: $json.variant_used,\n    timestamp: new Date().toISOString()\n  }],\n  offers_made: [],\n  strategy_used: $json.variant_used,\n  last_contact: new Date().toISOString()\n})}}",
        "expire": true,
        "ttl": 604800,
        "options": {}
      },
      "id": "redis_conversation",
      "name": "Initialize Conversation State",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1850, 300],
      "credentials": {
        "redis": {
          "id": "redis_cache",
          "name": "Redis Cache"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channel": "#collections-activity",
        "text": "📤 Cold Outreach Sent\nCustomer: {{$json[\"customer_name\"]}} (#{{$json[\"customer_id\"]}})\nBalance: ${{$json[\"current_balance\"]}}\nDays Overdue: {{$json[\"days_past_due\"]}}\nStrategy: {{$json[\"variant_used\"]}}\nPersonality: {{$json[\"personality_profile\"]}}\nMessage: {{$json[\"message_text\"]}}",
        "otherOptions": {}
      },
      "id": "slack_notification",
      "name": "Slack Activity Log",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [2050, 300],
      "credentials": {
        "slackApi": {
          "id": "slack_bot",
          "name": "Slack Bot"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channel": "#collections-errors",
        "text": "❌ Cold Outreach Error\nCustomer: {{$node[\"webhook_trigger\"].json[\"customer_id\"]}}\nError: {{$json[\"error\"][\"message\"]}}\nWorkflow: Cold Outreach\nTime: {{new Date().toISOString()}}",
        "otherOptions": {}
      },
      "id": "slack_error",
      "name": "Slack Error Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [1050, 500],
      "credentials": {
        "slackApi": {
          "id": "slack_bot",
          "name": "Slack Bot"
        }
      }
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "mysql_query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mysql_query": {
      "main": [
        [
          {
            "node": "calculate_authority",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "calculate_authority": {
      "main": [
        [
          {
            "node": "redis_cache_profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_cache_profile": {
      "main": [
        [
          {
            "node": "openai_agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai_agent1": {
      "main": [
        [
          {
            "node": "prepare_message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare_message": {
      "main": [
        [
          {
            "node": "wait_natural",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait_natural": {
      "main": [
        [
          {
            "node": "send_message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_message": {
      "main": [
        [
          {
            "node": "redis_conversation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis_conversation": {
      "main": [
        [
          {
            "node": "slack_notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveDataSuccessExecution": "all",
    "saveExecutionProgress": true,
    "saveManualExecutions": true,
    "errorWorkflow": "collections-error-handler"
  },
  "staticData": null,
  "pinData": {},
  "versionId": "1.0.0",
  "triggerCount": 0,
  "tags": [
    {
      "name": "collections",
      "createdAt": "2024-01-01T00:00:00.000Z"
    },
    {
      "name": "ai-powered",
      "createdAt": "2024-01-01T00:00:00.000Z"
    }
  ]
}